@using FitMate.Controllers;
@using FitMate.Presentation.Helpers;
@model FitMate.Presentation.ViewModels.Nutrition.NutritionSummaryViewModel

@{
    ViewData["Title"] = "Nutrition";
}

<div class="mb-2">
    <h2 class="d-inline">Nutrition Summary</h2>
    <a asp-controller="@(UiNamingHelper.GetControllerName<NutritionController>())" asp-action="@nameof(NutritionController.AddFood)" class="font-weight-bold mb-3 btn btn-primary">
        <i class="fa-solid fa-circle-plus"></i> Add Food
    </a>
</div>

<div id="MonthGraphData" class="d-none"></div>

<div class="row">
    <div class="col-sm-3">
        <div class="col">
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0 font-weight-normal card-header-text">
                        Target
                        <span class="float-right">
                            <i class="far fa-edit" style="cursor:pointer" data-toggle="modal" data-target="#TargetModal"></i>
                        </span>
                    </h3>
                </div>
                <div class="card-body p-1">
                    <div class="text-center mb-2">
                        <h6>Calories</h6>
                        <span>@Model.Target.DailyCalories cal</span>
                    </div>
                    <div class="d-flex text-center">
                        <div class="flex-grow-1">
                            <h6>Carbs</h6>
                            <div>@(Model.Target.DailyCarbohydrates)g</div>
                        </div>
                        <div class="flex-grow-1">
                            <h6>Fat</h6>
                            <div>@(Model.Target.DailyFat)g</div>
                        </div>
                        <div class="flex-grow-1">
                            <h6>Protein</h6>
                            <div>@(Model.Target.DailyProtein)g</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @{
            await Html.RenderPartialAsync("Partial/_StatsCard", Model.Today);
            await Html.RenderPartialAsync("Partial/_StatsCard", Model.Yesterday);
            await Html.RenderPartialAsync("Partial/_StatsCard", Model.WeekAverage);
            await Html.RenderPartialAsync("Partial/_StatsCard", Model.MonthAverage);
        }
    </div>

    <div class="col-lg">
        <h3 class="text-center mt-3">Last 7 Days</h3>
        <div class="row mt-3 mb-3">
            <div class="col">
                <canvas id="WeekCaloriesGraph" class="chart-canvas">
                </canvas>
            </div>
            <div class="col">
                <canvas id="WeekMacroGraph" class="chart-canvas">
                </canvas>
            </div>
        </div>

        <h3 class="text-center mt-3">Last 28 Days</h3>
        <div class="row mt-3">
            <div class="col">
                <canvas id="MonthCaloriesGraph" class="chart-canvas">
                </canvas>
            </div>
            <div class="col">
                <canvas id="MonthMacroGraph" class="chart-canvas">
                </canvas>
            </div>
        </div>
    </div>
</div>

@{
    await Html.RenderPartialAsync("Partial/_CalculateNutritionTargetModal", Model.CalculatorViewModel);
}

@section Scripts
{
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>
    <script src="~/js/Nutrition/summary.js"></script>
}